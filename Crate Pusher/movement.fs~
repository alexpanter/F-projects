module movement

// this function checks if the player can move in the chosen
// direction (represented by a coordinate(i,j) and a unit vector).
// The function also takes in as input an array2D and the size
// of the array (which is always a square).
let checkMove(coord: int * int, vec: int * int, a: int [,], size: int) =
    let i,j = coord
    let x,y = vec

    // checking input arguments
    if (x = y) || (abs(x + y) <> 1) then
        failwithf "checkMove did not receive a proper unit vector: %A" vec
    elif (i < 0 || j < 0) || (i >= size) || (j >= size) then
        failwithf "checkMove did not receive valid coordinates: %A" coord
    elif (x + j >= size - 1) || (y + i >= size - 1) then
        false
    elif (i = 0 && y = -1) || (j = 0 && x = -1) then
        false

    // checking collisions
    elif List.exists (fun x -> x = a.[i+y,j+x]) [1;2] then
        false //trying to move to an occupied space
    elif a.[i+y,j+x] = 2 then
        let mutable b = 1 //what's behind the crate
        try
            b <- a.[i+y+y,j+x+x]
        with
            | :? System.IndexOutOfRangeException -> b <- 1
        (b <> 1 && b <> 2) // 1 is wall, 2 is another crate
    else
        true


